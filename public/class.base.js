/* 
//description
Իմ ստեղծած աշխարհում կա հինգ հերոս՝ Խոտ(Grass),Խոտակեր(GrassEater),Կենդանի(Animal),Ծաղիկ(Flower),Թշնամի(Enemy)
Խոտ(Grass)-ինդեքսը 1,ամենասկզբում զբաղեցնում է ամենաշատ տարածքը,ունի կանաչ գույն և կարող է բազմանալ(իր շուրջը գտնվող ութ ազատ վանդակներից յուրաքանչյուրում)
Խոտակեր(GrassEater)-ինդեքսը 2, ամենասկզբում զբաղեցնում է համեմատաբար քիչ տարածքը, ունի դեղին գույն,ունի էներգիա,որը սկզբում 3 է, ինչպես նաև inFight հրաման,որը սկզբում false է, ունի 
կարողանում է շարժվել(energy--),ուտել(energy++),բազմանալ(կիսվելով, energy-=2), կռվել(until die), մահանալ(energy<=0), Խոտակորը կարողանում է շարժվել միայն ազատ վանդակներվ, ուտել խոտ և ծաղիկ(որտ ուտելու դեպքում դառնում է Թշնամի),կռվում է Թշնամիների դեմ(հաղթումէ նա ով ավելի շատ էներգիա ունի),և ուտվում է Կենդանու կողմից
Կենդանի(Animal)-Ինդեքս`3,ամենասկզբում զբաղեցնում է Խոտակորից քիչ տարածքը, գույնը կարմիր է, էներգիան սկզբում 5 է,կարողանում է շարժվել(energy--,ազատ վանդակներով),ուտել(energy++,միայն Խոտակերին),բազմանալ(երբ երկու հարևան կենդանիներ կան և canBreed>=5(մի փոքր մեծանալուց հետո) energy-=2), մահանալ(energy<=0),
Ծաղիկ(Flower)-՛ամենահանգիստ՛ կերպարը, որի ինդեքսը 4 է,գույնը սպիտակ, և նա ուղղակի ամենասկզբից կա, և կատարում է միայն Խոտակերին Թշնամի դարձնելու ֆունկցիան:
Թշնամի(enemy)-ինդեքսը 5, ամենասկզբում չկա(հայտնվումէ երբ խոտակերըը ուտում է ծաղիկը) ունի սև գույն,ունի էներգիա,որը սկզբում այնքան է, որքան ծաղիկ կերած խոտակերինը է, 
կարողանում է շարժվել(energy--),բազմանալ(կիսվելով, energy-=2), կռվել(until die), մահանալ(energy<=0);
Կերպարները ունեն էներգիայի լիմիթ(այսինքն կարող են ուտել և շատացնել էներգիան եթե այն չի անցնում նշված սահմանը):Խաղում կարող են հաղթել բոլոր կերպարները և զբաղեցնեն ամբողջ դաշտը,ինչպես նաև հագեցնեն իրենց Էներգիան և շարժվելու տեղ չունենալով մնան իրենց տեղում:
*/

class LivingCreature {
    constructor(x, y){
        this.x = x;
        this.y = y;
        this.directions = [
           [this.x - 1, this.y - 1],
           [this.x, this.y - 1],
           [this.x + 1, this.y - 1],
           [this.x - 1, this.y],
           [this.x + 1, this.y],
           [this.x - 1, this.y + 1],
           [this.x, this.y + 1],
           [this.x + 1, this.y + 1]
       ];
    }
       getNewCoords() {
        this.directions = [
            [this.x - 1, this.y - 1],
            [this.x, this.y - 1],
            [this.x + 1, this.y - 1],
            [this.x - 1, this.y],
            [this.x + 1, this.y],
            [this.x - 1, this.y + 1],
            [this.x, this.y + 1],
            [this.x + 1, this.y + 1]
        ];
    }
    
    chooseCell(index_number) {
        var found = [];
        for (var i in this.directions) {
            var x = this.directions[i][0];
            var y = this.directions[i][1];
            if (x >= 0 && x < matrix[0].length && y >= 0 && y < matrix.length){
                if (matrix[y][x] == index_number) {
                    found.push(this.directions[i]);
                }
            }   
        }
        return found;
    }

}
this.energy --;